# Pluma - 跨平台构建和发布工作流
name: Pluma CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  release:
    types: [created]
  # 允许手动触发工作流
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    # 打包构建产物
    - name: Create artifacts directory
      run: mkdir -p artifacts
      shell: bash

    # Windows特定打包
    - name: Package Windows
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        $buildDir = "${{ steps.strings.outputs.build-output-dir }}"
        $binDir = Join-Path -Path $buildDir -ChildPath "bin\${{ matrix.build_type }}"
        $libDir = Join-Path -Path $buildDir -ChildPath "lib\${{ matrix.build_type }}"

        # 创建临时目录结构
        $tempDir = Join-Path -Path $env:TEMP -ChildPath "pluma-package"
        New-Item -Path $tempDir -ItemType Directory -Force | Out-Null

        # 复制文件
        if (Test-Path $binDir) {
            Copy-Item -Path "$binDir\*" -Destination $tempDir -Recurse -Force
        }
        if (Test-Path $libDir) {
            Copy-Item -Path "$libDir\*" -Destination $tempDir -Recurse -Force
        }

        # 压缩
        Compress-Archive -Path "$tempDir\*" -DestinationPath "artifacts\pluma-${{ matrix.build_type }}-${{ matrix.c_compiler }}-windows.zip" -Force

    # Linux/macOS打包
    - name: Package Linux/macOS
      if: matrix.os != 'windows-latest'
      shell: bash
      run: |
        tar -czvf artifacts/pluma-${{ matrix.build_type }}-${{ matrix.c_compiler }}-linux.tar.gz -C ${{ steps.strings.outputs.build-output-dir }} bin lib

    # 上传构建产物作为工作流的成品
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: pluma-${{ matrix.os }}-${{ matrix.c_compiler }}
        path: artifacts/
        retention-days: 30

    # 如果是发布事件，将构建产物上传到发布页面
    - name: Upload Release Assets
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/*
        tag_name: ${{ github.ref_name }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
